####################################################################################################
## Notes to self - shouldn't really be in this file, but quick and dirty place to store it for now
## Mostly notes about how to adapt .travis.yml to a plain Ubuntu build
####################################################################################################


##### TODO: Compare all against Travis log in more detail
#####       I'm missing "install" part of lifecycle e.g. npm install after before_install; and the initial git checkout etc
#####       Also check out where there are failures/distracting warnings etc

##### TODO: Go back to comparing with README.md for both grasshopper and grasshopper-ui
##### TODO(ongoing): keep README.md in sync with this

##### General Environment #####

# http://docs.travis-ci.com/user/ci-environment/#CI-environment-OS
# Travis CI virtual machines are based on Ubuntu 12.04 LTS Server Edition 64 bit ...

# http://docs.travis-ci.com/user/ci-environment/#Environment-common-to-all-VM-images
# this explains how some stuff is already magically there (like git, PhantomJS etc)

# http://docs.travis-ci.com/user/installing-dependencies/
# Lots of useful stuff, as well as:
# "Our Linux environment is currently based on Ubuntu 12.04 LTS."


##### Installing Node.js ...

language: node_js
node_js:
  - "0.10.33"
# grasshopper uses - "0.10.30" ??
# https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
# https://deb.nodesource.com/setup magically (scarily!) configures apt-get to just do the right thing (urgh) - but nicer than non apt ??
# maybe do this locally/fork it locally etc - although it will be different from travis.
# TRY Paste this at end of sources.list for now
deb https://deb.nodesource.com/node precise main
deb-src https://deb.nodesource.com/node precise main
# then
curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
apt-get update
apt-cache showpkg nodejs # shows 0.10.33 at the moment
apt-get install nodejs # without the above fixes, actually installs 0.6.12
# Travis log appears to use "nvm install 0.10.33"

# http://achinth.com/post/58263924087/installing-node-js-using-nvm-on-ubuntu
# https://raw.githubusercontent.com/creationix/nvm/master/install.sh # argh more scary run stuff off the web as root


branches:
  only:
    - master

###### PostgreSQL

addons:
  postgresql: "9.3"
# Is "addon" the same as just psql or is it an addon for node.js?
apt-get install postgresql # actually installs 9.1 ??
# [start postgresql is built in]

###### Grunt CLI
# [ignore grunt-cli for now]
# --> actually needed later, see below, not sure where Travis gets it from
sudo npm install -g grunt-cli

###### Git
apt-get install git

before_install:

# TODO: Parameterise these hostnames, as they are referred to in other files?
# URGH README.md is one of them, maybe we should keep them in a list and script it?
  # Create virtual hosts
  - sudo sed -i "2i127.0.0.2  2014.cam.timetable.grasshopper.com" /etc/hosts
  - sudo sed -i "2i127.0.0.2  2013.cam.timetable.grasshopper.com" /etc/hosts
  - sudo sed -i "2i127.0.0.2  2014.timetable.cam.ac.uk" /etc/hosts
  - sudo sed -i "2i127.0.0.1  admin.grasshopper.com" /etc/hosts
  - cat /etc/hosts

  # Install test dependencies
## TODO: work out whether we need these /test/ dependencies on a production server?
##       (similarly test steps and coverage deps/steps)
# sudo: (needed for -g global install to /usr/lib/node_modules and /usr/bin, don't know why Travis works without it)
  - npm install -g casperjs
# ALSO
sudo npm install -g phantomjs
# And apparently to make it work properly:
sudo apt-get install libfontconfig1

  # Show the CasperJS and PhantomJS version for debugging purposes
  - casperjs --version
  - phantomjs --version

  # Prepare the machine
  - sudo apt-get update
# mostly gcc and make ; probably similar to stuff already on Travis so possibly superfluous
# But a bigger question (cf SG??) is whether it's appropriate to build Apache and dependencies from scratch?
# If we are going to build from source, let's pick a more official source than lib.gblearn.com
# see http://httpd.apache.org/docs/2.4/install.html (as mentioned in README.md)
## it explains the dependencies, and has more official mirrors than lib.gblearn.com
  - sudo apt-get install build-essential
  - cd /usr/local/lib

  # Get Apache HTTP-server 2.4
# apache 2.4 comes with trusty by default, but might not have apr/apr-util/pcre?
  - sudo wget http://lib.gblearn.com/apache/httpd-2.4.10.tar.gz -q
  - sudo tar xfz httpd-2.4.10.tar.gz
  - cd httpd-2.4.10/srclib/

  # Download dependencies
  - sudo wget http://lib.gblearn.com/apache/apr/apr-1.5.1.tar.gz -q
  - sudo wget http://lib.gblearn.com/apache/apr/apr-util-1.5.3.tar.gz -q
  - sudo wget http://lib.gblearn.com/apache/pcre/pcre-8.34.tar.gz -q

  # Install and configure APR
  - echo 'Installing APR'
  - sudo tar xfz ./apr-1.5.1.tar.gz
  - cd apr-1.5.1
  - sudo ./configure
  - sudo make --silent
  - sudo make install --silent
  - cd ../

  # Install and configure APR util
  - echo 'Installing APR util'
  - sudo tar xfz ./apr-util-1.5.3.tar.gz
  - cd apr-util-1.5.3
  - sudo ./configure --with-apr=/usr/local/apr/bin/apr-1-config
  - sudo make --silent
  - sudo make install --silent
  - cd ../

  # Install and configure PCRE
  - echo 'Installing PCRE'
  - sudo tar xfz pcre-8.34.tar.gz
  - cd pcre-8.34
  - sudo ./configure --prefix=/usr/local/pcre
  - sudo make --silent
  - sudo make install --silent
  - cd ../..

  # Install and configure Apache HTTPD 2.4
  - echo 'Installing Apache'
  - sudo ./configure --prefix=/usr/local/apache2 --with-pcre=/usr/local/pcre --enable-so
  - sudo make --silent
  - sudo make install --silent
  - cd /usr/local/apache2/conf
  - sudo mkdir sites-enabled

  # Install Grasshopper
  - echo 'Installing Grasshopper'
# non-Travis:
mkdir -p ~/build/CUL-DigitalServices
  - cd ~/build/CUL-DigitalServices
# depth=1 is important - it doesn't clone the rest of the history
# TODO: fix /CUL-DigitalServices/grasshopper/README.md so it doesn't refer to cloning fronteerio
  - git clone --branch master --depth=1 git://github.com/CUL-DigitalServices/grasshopper.git ./grasshopper
  - cd ./grasshopper
# Install Grasshopper's dependencies (package.json) locally to ./node_modules
# --production means ignore devDependencies
  - npm install --production

  # Configure postgres
  - echo 'Creating database'
  - psql -c 'CREATE DATABASE grasshoppertest;' -U postgres
# do this instead: config.db.database = 'grasshoppertest';
  - echo "config.db.username = 'postgres';" >> config.js
# Also nb config.js has other useful stuff, e.g. config.servers admin.grasshopper.com:2000
# TODO: parameterise config.js ?!!
# Not sure how Travis manages to get away with such lightweight postgresql auth setup
# subset of grasshopper README.md instructions are useful here:
sudo -u postgres psql template1
template1=# CREATE USER grasshopper WITH PASSWORD 'grasshopper';
template1=# GRANT ALL PRIVILEGES ON DATABASE grasshoppertest TO grasshopper;
# Test that it worked:
psql -U grasshopper -h localhost grasshoppertest

# TODO: compare with full Grasshopper README.md etc:
psql template1
    template1=# CREATE USER grasshopper WITH PASSWORD 'grasshopper';
    template1=# CREATE DATABASE grasshopper;
    template1=# CREATE DATABASE grasshoppertest;
    template1=# GRANT ALL PRIVILEGES ON DATABASE grasshopper TO grasshopper;
    template1=# GRANT ALL PRIVILEGES ON DATABASE grasshoppertest TO grasshopper;

  # Install Grasshopper UI
  - echo 'Installing Grasshopper UI'
# TRY
git clone --branch master --depth=1 git://github.com/CUL-DigitalServices/grasshopper-ui.git ./grasshopper-ui
  - cd ~/build/CUL-DigitalServices/grasshopper-ui
# Install Grasshopper UI's dependencies (package.json) locally to ./node_modules
  - npm install
# this is where grunt-cli seems to be needed
# TODO: find out more about how this grunt task works
# TODO: review the apache config contents and understand how they work, e.g. log location, parameterise things, how much is 2.4-specific, how much is grasshopper, how much is grasshopper-ui
# work out how best to do the multiple VirtualHosts in production (admin and tenants on separate interfaces?)
# e.g. for my own testing purposes:
sudo vim /usr/local/apache2/conf/sites-enabled/app_admin.conf # edit 127.0.0.1:80 to *:80 to make it work on 192.168.56.56
sudo vim /usr/local/apache2/conf/sites-enabled/app_timetable.conf # edit 127.0.0.2:80 to *:80 to make it work on 192.168.56.56 , add ServerName directives for each of those in /etc/hosts above
sudo /usr/local/apache2/bin/apachectl restart
  - grunt configApache
  - sudo cp ./target/optimized/apache/httpd.conf /usr/local/apache2/conf/httpd.conf
  - sudo cp -R ./target/optimized/apache/app_*.conf /usr/local/apache2/conf/sites-enabled
# At first glance, looks like grasshopper-ui is just static files served through :2001 and apache
# So just do
cd build/CUL-DigitalServices/grasshopper-ui
git pull
# To update it (providing no dependencies need updating)
# TODO: double-check just what the node content of this dir is - dependencies and testing? :2001 actually comes out of ../grasshopper 's server?

  # Start Apache
# TODO: this needs to be part of the Ubuntu system services on startup!
  - sudo /usr/local/apache2/bin/apachectl start
  - sleep 5

##### missing implicit install step - seems to just do npm install ? # which is probably duplicate?

##### also start the grasshopper server (as per its README.md):
# Not exactly sure how Travis does it, probably part of "grunt test" - since it only needs for testing?
# TODO: http://seanvbaker.com/setting-up-a-node-website/ - making an Ubuntu service out of "node server.js"
node app

# grasshopper is based on the "express" webapp framework (see package.json dependencies)
# app.js is the starting point that calls node_modules/gh-core/lib/api.js - init
# init calls initialiseExpressServers which then launches two Express servers
# using node_modules/gh-core/lib/server.js - setUpServer

# (see rest.js files for REST endpoints)

script:
  - grunt test

after_success:
  # Package and upload to Amazon S3
# TODO: investigate this further: both the upload, and the deploy from upload (rather than using this build-system config which isn't production?)
  - ./etc/scripts/travis-upload.sh

after_script:
  - grunt coveralls

notifications:
# TODO: have a look into these
  email:
    - bp323@cam.ac.uk
    - md623@cam.ac.uk
    - rwlc3@cam.ac.uk
# TODO: add me to grasshopper travis as well
  irc:
    channels:
      - "irc.freenode.org#ucam-ds"
    skip_join: true
